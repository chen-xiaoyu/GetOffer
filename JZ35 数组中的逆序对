public class Solution {
    public int InversePairs(int [] array) {
        if(array == null || array.length == 0){
            return 0;
        }
        int[] copy = new int[array.length];
        for(int i=0; i<array.length; i++){
            copy[i] = array[i];
        }
        int count = InversePairsCore(array, copy, 0, array.length-1);
        return count;
    }
    
    private int InversePairsCore(int[] array,int[] copy, int low, int high){
        if(low == high){
            return 0;
        }
        int mid = (low+high)>>1;
        int leftcount = InversePairsCore(array, copy, low, mid);
        int rightcount = InversePairsCore(array, copy, mid+1, high);
        int count = 0;
        int i = mid;
        int j = high;
        int loc = high;
        while(i>=low&&j>mid){
            //在merge过程中统计逆序对数
            //在两个子序列left、right合并过程中，当left中当前元素A大于right中当前元素B时，
            //因为right序列已经有序，所以不用比较，A一定大于right序列当前所有剩余元素，
            //其全部可以与A组成逆序对
            if(array[i]>array[j]){
                count += j-mid;
                copy[loc--] = array[i--];
                if(count>=1000000007){
                    count = count%1000000007;
                }
            }else{
                copy[loc--] = array[j--];
            }
        }
        for(;j>mid;j--){
            copy[loc--] = array[j];
        }
        for(;i>=low;i--){
            copy[loc--] = array[i];
        }
        for(int s =low; s<=high; s++){
            array[s]=copy[s];
        }
        return (count+leftcount+rightcount)%1000000007;
    }
}
