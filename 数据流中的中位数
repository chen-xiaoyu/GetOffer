import java.util.PriorityQueue;
import java.util.Comparator;
public class Solution {
    private PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>(); //小根堆，保存中位数右边的数据，默认维护小根堆
    private PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(15, new Comparator<Integer>() {
        @Override
        public int compare(Integer o1, Integer o2) {
            return o2 - o1;
        }
    });  //重写排序函数，采用大根堆，保存中位数左边的数据
    int n=0;
    public void Insert(Integer num) { //插入函数，注意奇偶数
        if(n%2==0){
            maxHeap.offer(num);
            int max=maxHeap.poll();
            minHeap.offer(min);
        }else{
            minHeap.offer(num);
            int min=minHeap.poll();
            maxHeap.offer(min);
        }
        n++;
    }

    public Double GetMedian() {
        if(n%2==0){
            return new Double(maxHeap.peek()+minHeap.peek())/2;
        }else{
            return new Double(maxHeap.peek());
        }
    }
}
