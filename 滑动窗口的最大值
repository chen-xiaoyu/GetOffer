import java.util.*;
public class Solution {
    public ArrayList<Integer> maxInWindows(int [] num, int size)
    {
        ArrayList<Integer> result = new ArrayList<Integer>(); // 保存结果的数组
        if(num==null ||num.length==0 || size<=0 || size >num.length){
            return result;
        }
        LinkedList<Integer> max = new LinkedList<Integer>(); //双向链表，保存滑动窗口中的值
        for(int i=0; i<num.length; i++){
            while(!max.isEmpty()&& num[max.peekLast()]<num[i]){ //如果容器不为空，则让当前元素和容器的最后一个元素比较，
            //如果大于，则将容器的最后一个元素删除，然后继续讲当前元素和容器的最后一个元素比较
                max.pollLast();
            }
            max.addLast(i);//如果当前元素小于容器的最后一个元素，则直接将当前元素加入到容器的末尾
            if(max.peekFirst()==i-size){ //如果容器头部的元素已经不属于当前窗口的边界，则应该将头部元素删除
                max.pollFirst();
            }
            if(i>=size-1){//判断是否遍历完数组
                result.add(num[max.peekFirst()]);
            }
        }
        return result;
    }
}
