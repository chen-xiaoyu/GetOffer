/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    int index=0;
    TreeNode KthNode(TreeNode pRoot, int k)
    {
        if(pRoot==null || k<=0){ //特殊情况判定
            return null;
        }
        return myNode(pRoot,k);
    }
    
    private TreeNode myNode(TreeNode pRoot, int k){ //按照中序遍历的顺序打印出来的正好是排序好的顺序
        TreeNode target=null;
        if(pRoot.left!=null){
            target=myNode(pRoot.left, k);
        }
        if(target==null){
            index++; //判断没有左子树存在的情况
            if(index==k){
                return pRoot;//判断没有左子树存在且求的值是根结点的情况
            }
        }
        if(target==null && pRoot.right!=null){
            target=myNode(pRoot.right, k);
        }
        return target;
    }
}
